/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Address = {
  _type: "address";
  title?: string;
  address?: string;
  phone?: string;
  email?: string;
  googleMap?: Geopoint;
  socialLinks?: Array<{
    icon?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      width?: number;
      height?: number;
      _type: "image";
    };
    url?: string;
    newTab?: boolean;
    _key: string;
  }>;
};

export type Team = {
  _type: "team";
  title?: string;
  team?: Array<{
    name?: string;
    role?: string;
    icon?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      width?: number;
      height?: number;
      _type: "image";
    };
    bgColor?: Color;
    _type: "teamMember";
    _key: string;
  }>;
};

export type TestimonialSlider = {
  _type: "testimonialSlider";
  title?: string;
  testimonials?: Array<{
    quote?: string;
    author?: string;
    _type: "testimonial";
    _key: string;
  }>;
};

export type PageBuilder = Array<{
  _key: string;
} & Hero | {
  _key: string;
} & CtaBlock | {
  _key: string;
} & ImageTextSection | {
  _key: string;
} & ClientList | {
  _key: string;
} & Services | {
  _key: string;
} & TestimonialSlider | {
  _key: string;
} & Team | {
  _key: string;
} & Address>;

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteTitle?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    width?: number;
    height?: number;
    url?: string;
    _type: "image";
  };
  menuItems?: Array<{
    title?: string;
    url?: string;
    openInNewTab?: boolean;
    _key: string;
  }>;
  footer?: {
    footerTitle?: string;
    footerDescription?: string;
    footermenuItems?: Array<{
      title?: string;
      url?: string;
      newTab?: boolean;
      _key: string;
    }>;
    copyrrightText?: string;
    socialLinks?: Array<{
      icon?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        width?: number;
        height?: number;
        _type: "image";
      };
      url?: string;
      newTab?: boolean;
      _key: string;
    }>;
  };
  homePage?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "page";
  };
  blogPostsPerPage?: number;
  blogPageCTA?: CtaBlock;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  contactForm?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contactForm";
  };
  content?: PageBuilder;
  seo?: Seo;
};

export type Services = {
  _type: "services";
  title?: string;
  services?: Array<{
    title?: string;
    text?: string;
    bgColor?: Color;
    _type: "service";
    _key: string;
  }>;
};

export type ClientList = {
  _type: "clientList";
  title?: string;
  logos?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    width?: number;
    height?: number;
    url?: string;
    openInNewTab?: boolean;
    _type: "logo";
    _key: string;
  }>;
};

export type ImageTextSection = {
  _type: "imageTextSection";
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    width?: number;
    height?: number;
    _type: "image";
  };
  imagePosition?: "left" | "right";
  button?: {
    text?: string;
    link?: string;
    openInNewTab?: boolean;
  };
};

export type HighlightBlock = {
  _type: "highlightBlock";
  highlightText?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  bgColor?: Color;
  textColor?: Color;
};

export type Table = {
  _type: "table";
  rows?: Array<{
    cells?: Array<{
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "strong" | "em";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      isHeader?: boolean;
      _type: "cell";
      _key: string;
    }>;
    _type: "row";
    _key: string;
  }>;
  caption?: string;
};

export type CtaBlock = {
  _type: "ctaBlock";
  heading?: string;
  subheading?: string;
  button?: {
    text?: string;
    link?: string;
    openInNewTab?: boolean;
  };
  backgroundType?: "image" | "color";
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  backgroundColor?: Color;
  textColor?: Color;
};

export type Hero = {
  _type: "hero";
  title?: string;
  subtitle?: string;
  button?: {
    text?: string;
    link?: string;
    openInNewTab?: boolean;
  };
  backgroundType?: "image" | "color";
  bgImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  backgroundColor?: Color;
  textColor?: Color;
  alignment?: "left" | "center" | "right";
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    _key: string;
  } & Table | {
    _key: string;
  } & HighlightBlock>;
  seo?: Seo;
};

export type Seo = {
  _type: "seo";
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  noIndex?: boolean;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Table | {
  _key: string;
} & HighlightBlock>;

export type FormGeneralSettings = {
  _id: string;
  _type: "formGeneralSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  adminEmail?: string;
  smtpUsername?: string;
  smtpPassword?: string;
  successMessage?: string;
  confirmationSubject?: string;
  confirmationMessage?: string;
  recaptchaEnabled?: boolean;
  recaptchaSiteKey?: string;
  recaptchaSecretKey?: string;
};

export type ContactForm = {
  _id: string;
  _type: "contactForm";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  showtitle?: boolean;
  id?: string;
  class?: string;
  fields?: Array<{
    label?: string;
    type?: "text" | "email" | "tel" | "textarea" | "url" | "file" | "checkbox" | "select" | "radio";
    showPlaceholder?: boolean;
    placeholder?: string;
    name?: string;
    selectOptions?: Array<string>;
    radioOptions?: Array<string>;
    checkboxOptions?: Array<string>;
    helpText?: string;
    note?: string;
    isRequired?: boolean;
    _key: string;
  }>;
  submitButtonText?: string;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Address | Team | TestimonialSlider | PageBuilder | SiteSettings | Page | Services | ClientList | ImageTextSection | HighlightBlock | Table | CtaBlock | Hero | Post | Seo | Author | Category | BlockContent | FormGeneralSettings | ContactForm | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: HEADER_QUERY
// Query: *[_type == "siteSettings" && _id == "siteSettings"][0]{   siteTitle,  logo,  menuItems[] {    title,    url,    openInNewTab,  },  }
export type HEADER_QUERYResult = {
  siteTitle: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    width?: number;
    height?: number;
    url?: string;
    _type: "image";
  } | null;
  menuItems: Array<{
    title: string | null;
    url: string | null;
    openInNewTab: boolean | null;
  }> | null;
} | null;
// Variable: FOOTER_QUERY
// Query: *[_type == "siteSettings" && _id == "siteSettings"][0]{  footer }
export type FOOTER_QUERYResult = {
  footer: {
    footerTitle?: string;
    footerDescription?: string;
    footermenuItems?: Array<{
      title?: string;
      url?: string;
      newTab?: boolean;
      _key: string;
    }>;
    copyrrightText?: string;
    socialLinks?: Array<{
      icon?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        width?: number;
        height?: number;
        _type: "image";
      };
      url?: string;
      newTab?: boolean;
      _key: string;
    }>;
  } | null;
} | null;
// Variable: HOME_PAGE_QUERY
// Query: *[_id == "siteSettings"][0]{    _id,    _type,    title,    "slug": slug.current,  homePage->{    ...,    "seo": {    "title": coalesce(seo.title, title, ""),     "description": coalesce(seo.description,  ""),    "image": seo.image,    "noIndex": seo.noIndex == true  },    content[]{      ...,    }        }}
export type HOME_PAGE_QUERYResult = {
  _id: string;
  _type: "author";
  title: null;
  slug: string | null;
  homePage: null;
} | {
  _id: string;
  _type: "category";
  title: string | null;
  slug: string | null;
  homePage: null;
} | {
  _id: string;
  _type: "contactForm";
  title: string | null;
  slug: null;
  homePage: null;
} | {
  _id: string;
  _type: "formGeneralSettings";
  title: null;
  slug: null;
  homePage: null;
} | {
  _id: string;
  _type: "page";
  title: string | null;
  slug: string | null;
  homePage: null;
} | {
  _id: string;
  _type: "post";
  title: string | null;
  slug: string | null;
  homePage: null;
} | {
  _id: string;
  _type: "sanity.fileAsset";
  title: string | null;
  slug: null;
  homePage: null;
} | {
  _id: string;
  _type: "sanity.imageAsset";
  title: string | null;
  slug: null;
  homePage: null;
} | {
  _id: string;
  _type: "siteSettings";
  title: null;
  slug: null;
  homePage: {
    _id: string;
    _type: "page";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    contactForm?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "contactForm";
    };
    content: Array<{
      _key: string;
      _type: "address";
      title?: string;
      address?: string;
      phone?: string;
      email?: string;
      googleMap?: Geopoint;
      socialLinks?: Array<{
        icon?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          width?: number;
          height?: number;
          _type: "image";
        };
        url?: string;
        newTab?: boolean;
        _key: string;
      }>;
    } | {
      _key: string;
      _type: "clientList";
      title?: string;
      logos?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        width?: number;
        height?: number;
        url?: string;
        openInNewTab?: boolean;
        _type: "logo";
        _key: string;
      }>;
    } | {
      _key: string;
      _type: "ctaBlock";
      heading?: string;
      subheading?: string;
      button?: {
        text?: string;
        link?: string;
        openInNewTab?: boolean;
      };
      backgroundType?: "color" | "image";
      backgroundImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      backgroundColor?: Color;
      textColor?: Color;
    } | {
      _key: string;
      _type: "hero";
      title?: string;
      subtitle?: string;
      button?: {
        text?: string;
        link?: string;
        openInNewTab?: boolean;
      };
      backgroundType?: "color" | "image";
      bgImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      backgroundColor?: Color;
      textColor?: Color;
      alignment?: "center" | "left" | "right";
    } | {
      _key: string;
      _type: "imageTextSection";
      title?: string;
      description?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      mainImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        width?: number;
        height?: number;
        _type: "image";
      };
      imagePosition?: "left" | "right";
      button?: {
        text?: string;
        link?: string;
        openInNewTab?: boolean;
      };
    } | {
      _key: string;
      _type: "services";
      title?: string;
      services?: Array<{
        title?: string;
        text?: string;
        bgColor?: Color;
        _type: "service";
        _key: string;
      }>;
    } | {
      _key: string;
      _type: "team";
      title?: string;
      team?: Array<{
        name?: string;
        role?: string;
        icon?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          width?: number;
          height?: number;
          _type: "image";
        };
        bgColor?: Color;
        _type: "teamMember";
        _key: string;
      }>;
    } | {
      _key: string;
      _type: "testimonialSlider";
      title?: string;
      testimonials?: Array<{
        quote?: string;
        author?: string;
        _type: "testimonial";
        _key: string;
      }>;
    }> | null;
    seo: {
      title: string | "";
      description: string | "";
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      noIndex: boolean | false;
    };
  } | null;
} | null;
// Variable: PAGE_QUERY
// Query: *[_type=="page" && slug.current == $slug][0]{   _id,    _type,    title,    "slug": slug.current,    content[]{      ...,    },    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description, ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },    hideHeader,    hideFooter,    contactForm}
export type PAGE_QUERYResult = {
  _id: string;
  _type: "page";
  title: string | null;
  slug: string | null;
  content: Array<{
    _key: string;
    _type: "address";
    title?: string;
    address?: string;
    phone?: string;
    email?: string;
    googleMap?: Geopoint;
    socialLinks?: Array<{
      icon?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        width?: number;
        height?: number;
        _type: "image";
      };
      url?: string;
      newTab?: boolean;
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "clientList";
    title?: string;
    logos?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      width?: number;
      height?: number;
      url?: string;
      openInNewTab?: boolean;
      _type: "logo";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "ctaBlock";
    heading?: string;
    subheading?: string;
    button?: {
      text?: string;
      link?: string;
      openInNewTab?: boolean;
    };
    backgroundType?: "color" | "image";
    backgroundImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    backgroundColor?: Color;
    textColor?: Color;
  } | {
    _key: string;
    _type: "hero";
    title?: string;
    subtitle?: string;
    button?: {
      text?: string;
      link?: string;
      openInNewTab?: boolean;
    };
    backgroundType?: "color" | "image";
    bgImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    backgroundColor?: Color;
    textColor?: Color;
    alignment?: "center" | "left" | "right";
  } | {
    _key: string;
    _type: "imageTextSection";
    title?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    mainImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      width?: number;
      height?: number;
      _type: "image";
    };
    imagePosition?: "left" | "right";
    button?: {
      text?: string;
      link?: string;
      openInNewTab?: boolean;
    };
  } | {
    _key: string;
    _type: "services";
    title?: string;
    services?: Array<{
      title?: string;
      text?: string;
      bgColor?: Color;
      _type: "service";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "team";
    title?: string;
    team?: Array<{
      name?: string;
      role?: string;
      icon?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        width?: number;
        height?: number;
        _type: "image";
      };
      bgColor?: Color;
      _type: "teamMember";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "testimonialSlider";
    title?: string;
    testimonials?: Array<{
      quote?: string;
      author?: string;
      _type: "testimonial";
      _key: string;
    }>;
  }> | null;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
  hideHeader: null;
  hideFooter: null;
  contactForm: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contactForm";
  } | null;
} | null;
// Variable: SITEMAP_QUERY
// Query: *[_type in ["page", "post"] && defined(slug.current)] {      "href": select(        _type == "page" => "/" + slug.current,        _type == "post" => "/posts/" + slug.current,        slug.current      ),      _updatedAt  }
export type SITEMAP_QUERYResult = Array<{
  href: string | null;
  _updatedAt: string;
}>;
// Variable: POSTS_QUERY
// Query: * [_type == "post"] | order(publishedAt desc) {  _id,  title,  slug,  publishedAt,  mainImage,  categories[]->{    _id,    title  },  author->{    _id,    name,    slug,    image  },  "categories": categories[]->title,  _type // Add this line}[$start...$end]
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<string | null> | null;
  author: {
    _id: string;
    name: string | null;
    slug: Slug | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  _type: "post";
}>;
// Variable: POSTS_COUNT_QUERY
// Query: count(*[_type == "post"])
export type POSTS_COUNT_QUERYResult = number;
// Variable: SINGLE_POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0] {    _id,    _type,    title,    slug,    "author": author-> { name, image, bio, socialLinks },    mainImage { asset->, alt },    categories[]-> { title },    publishedAt,    body[]{      ...,    },    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description, description, ""),      "image": seo.image,      "noIndex": seo.noIndex == true    }  }
export type SINGLE_POST_QUERYResult = {
  _id: string;
  _type: "post";
  title: string | null;
  slug: Slug | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    bio: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    socialLinks: null;
  } | null;
  mainImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
  categories: Array<{
    title: string | null;
  }> | null;
  publishedAt: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
    _type: "highlightBlock";
    highlightText?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    bgColor?: Color;
    textColor?: Color;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    _key: string;
    _type: "table";
    rows?: Array<{
      cells?: Array<{
        content?: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "em" | "normal" | "strong";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }>;
        isHeader?: boolean;
        _type: "cell";
        _key: string;
      }>;
      _type: "row";
      _key: string;
    }>;
    caption?: string;
  }> | null;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
} | null;
// Variable: SITE_SETTINGS_QUERY
// Query: *[_type == "siteSettings" && _id == "siteSettings"][0] {    blogPostsPerPage,    blogPageCTA {      heading,      subheading,      button {        text,        link,        openInNewTab      },      backgroundType,      backgroundImage,      backgroundColor,      textColor    }  }
export type SITE_SETTINGS_QUERYResult = {
  blogPostsPerPage: number | null;
  blogPageCTA: {
    heading: string | null;
    subheading: string | null;
    button: {
      text: string | null;
      link: string | null;
      openInNewTab: boolean | null;
    } | null;
    backgroundType: "color" | "image" | null;
    backgroundImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    backgroundColor: Color | null;
    textColor: Color | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"siteSettings\" && _id == \"siteSettings\"][0]{ \n  siteTitle,\n  logo,\n  menuItems[] {\n    title,\n    url,\n    openInNewTab,\n  },\n  }": HEADER_QUERYResult;
    "*[_type == \"siteSettings\" && _id == \"siteSettings\"][0]{\n  footer }": FOOTER_QUERYResult;
    "*[_id == \"siteSettings\"][0]{\n    _id,\n    _type,\n    title,\n    \"slug\": slug.current,\n  homePage->{\n    ...,\n    \"seo\": {\n    \"title\": coalesce(seo.title, title, \"\"),\n     \"description\": coalesce(seo.description,  \"\"),\n    \"image\": seo.image,\n    \"noIndex\": seo.noIndex == true\n  },\n    content[]{\n      ...,\n    }      \n  }\n}": HOME_PAGE_QUERYResult;
    "*[_type==\"page\" && slug.current == $slug][0]{\n   _id,\n    _type,\n    title,\n    \"slug\": slug.current,\n    content[]{\n      ...,\n    },\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description, \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n    hideHeader,\n    hideFooter,\n    contactForm\n}": PAGE_QUERYResult;
    "\n  *[_type in [\"page\", \"post\"] && defined(slug.current)] {\n      \"href\": select(\n        _type == \"page\" => \"/\" + slug.current,\n        _type == \"post\" => \"/posts/\" + slug.current,\n        slug.current\n      ),\n      _updatedAt\n  }\n  ": SITEMAP_QUERYResult;
    "* [_type == \"post\"] | order(publishedAt desc) {\n  _id,\n  title,\n  slug,\n  publishedAt,\n  mainImage,\n  categories[]->{\n    _id,\n    title\n  },\n  author->{\n    _id,\n    name,\n    slug,\n    image\n  },\n  \"categories\": categories[]->title,\n  _type // Add this line\n}[$start...$end]": POSTS_QUERYResult;
    "count(*[_type == \"post\"])": POSTS_COUNT_QUERYResult;
    "\n  *[_type == \"post\" && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    slug,\n    \"author\": author-> { name, image, bio, socialLinks },\n    mainImage { asset->, alt },\n    categories[]-> { title },\n    publishedAt,\n    body[]{\n      ...,\n    },\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description, description, \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    }\n  }\n": SINGLE_POST_QUERYResult;
    "\n  *[_type == \"siteSettings\" && _id == \"siteSettings\"][0] {\n    blogPostsPerPage,\n    blogPageCTA {\n      heading,\n      subheading,\n      button {\n        text,\n        link,\n        openInNewTab\n      },\n      backgroundType,\n      backgroundImage,\n      backgroundColor,\n      textColor\n    }\n  }\n": SITE_SETTINGS_QUERYResult;
  }
}
